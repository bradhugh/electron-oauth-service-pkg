import { AuthenticationResult } from "../AuthenticationResult";
import { AuthenticationResultEx } from "../AuthenticationResultEx";
import { ILogger } from "../ILogger";
import { Authenticator } from "../instance/Authenticator";
import { TokenSubjectType } from "../internal/cache/TokenCacheKey";
import { CallState } from "../internal/CallState";
import { ClientKey } from "../internal/clientcreds/ClientKey";
import { PlatformInformation } from "../internal/platform/PlatformInformation";
import { IRequestData } from "../internal/RequestData";
import { DictionaryRequestParameters } from "../internal/RequestParameters";
import { UserIdentifierType } from "../UserIdentifier";
export declare abstract class AcquireTokenHandlerBase {
    static createCallState(correlationId: string, logger: ILogger): CallState;
    protected static nullResource: string;
    callState: CallState;
    protected supportADFS: boolean;
    protected authenticator: Authenticator;
    protected resource: string;
    protected clientKey: ClientKey;
    protected resultEx: AuthenticationResultEx;
    protected tokenSubjectType: TokenSubjectType;
    protected uniqueId: string;
    protected displayableId: string;
    protected loadFromCache: boolean;
    protected storeToCache: boolean;
    protected platformInformation: PlatformInformation;
    protected brokerParameters: Map<string, string>;
    protected userIdentifierType: UserIdentifierType;
    private tokenCache;
    private cacheQueryData;
    private client;
    protected constructor(requestData: IRequestData, logger: ILogger);
    runAsync(): Promise<AuthenticationResult>;
    protected abstract addAdditionalRequestParameters(requestParameters: DictionaryRequestParameters): void;
    protected preTokenRequestAsync(): Promise<void>;
    protected updateAuthorityAsync(updatedAuthority: string): Promise<void>;
    protected postTokenRequestAsync(resultEx: AuthenticationResultEx): Promise<void>;
    protected postRunAsync(result: AuthenticationResult): Promise<void>;
    protected preRunAsync(): Promise<void>;
    protected validateAuthorityType(): void;
    protected sendTokenRequestAsync(): Promise<AuthenticationResultEx>;
    protected sendTokenRequestByRefreshTokenAsync(refreshToken: string): Promise<AuthenticationResultEx>;
    private logReturnedToken;
    private sendHttpMessageAsync;
    private storeResultExToCacheAsync;
    private refreshAccessTokenAsync;
    private notifyBeforeAccessCache;
    private notifyAfterAccessCache;
}
